create sequence daily_summary_seq start with 1 increment by 1;
create sequence genre_summary_seq start with 1 increment by 5;
create sequence movie_seq start with 1 increment by 10;
create sequence rating_seq start with 1 increment by 10;
create sequence trending_movies_seq start with 1 increment by 10;
create table genre (id integer generated by default as identity, genre_name varchar(255) not null unique check (genre_name in ('ACTION','ANIMATION','DRAMA','CRIME','THRILLER','MYSTERY','SCI_FY','ROMANCE','DOCUMENTARY','ADULT','MUSIC','MUSICAL','GAME_SHOW','FANTASY','REALITY_TV','FAMILY','ADVENTURE','BIOGRAPHY','HISTORY','SPORT','NEWS','TALK_SHOW','HORROR','WESTERN','WAR','COMEDY')), primary key (id));
create table genre_summary (avg_rating float(53) not null, avg_rating_variation float(53) not null, current_vote_density float(53) not null, genre_id integer not null, new_movies_avg_duration float(53) not null, total_adult_movies_perc float(53) not null, total_avg_duration float(53) not null, total_avg_num_votes float(53) not null, id bigint not null, num_movies_analyzed bigint not null, num_new_movies bigint not null, num_new_votes bigint not null, num_total_adult_movies bigint not null, num_total_votes bigint not null, summary_id bigint, primary key (id), constraint summary_id_genre_id_index unique (summary_id, genre_id));
create table movie (insert_date date not null, is_adult boolean, runtime_minutes integer, year integer not null, id bigint not null, original_title varchar(255), primary_title varchar(255), t_const varchar(255) not null unique, primary key (id), constraint tConst_insertDate_index unique (t_const, insert_date));
create table movie_genre (genre_id integer not null, movie_id bigint not null);
create table rating (average_rating float4, insert_date date not null, num_votes integer, id bigint not null, movie_id bigint not null, primary key (id), constraint movie_insertDate_index unique (movie_id, insert_date));
create table summary (avg_rating float(53) not null, avg_rating_variation float(53) not null, current_vote_density float(53) not null, end_date date not null unique, new_movies_avg_duration float(53) not null, start_date date not null unique, total_adult_movies_perc float(53) not null, total_avg_duration float(53) not null, total_avg_num_votes float(53) not null, id bigint not null, num_movies_analyzed bigint not null, num_new_movies bigint not null, num_new_votes bigint not null, num_total_adult_movies bigint not null, num_total_votes bigint not null, primary key (id));
create table trending_movies_summary (position integer, id bigint not null, movie_id bigint not null, rating_end_id bigint unique, rating_start_id bigint unique, primary key (id));
alter table if exists genre_summary add constraint FKcqfkcoc5qbbw94b4xhduaplbc foreign key (genre_id) references genre;
alter table if exists genre_summary add constraint FK98wq8aqrv22qk33q4f8dqg0ew foreign key (summary_id) references summary;
alter table if exists movie_genre add constraint FK86p3roa187k12avqfl28klp1q foreign key (genre_id) references genre;
alter table if exists movie_genre add constraint FKp6vjabv2e2435at1hnuxg64yv foreign key (movie_id) references movie;
alter table if exists rating add constraint FKlqsvmdlh3ep1boo7in23xe86y foreign key (movie_id) references movie;
alter table if exists trending_movies_summary add constraint FKlkt6losivbdrqfyvdkg65kwqb foreign key (rating_end_id) references rating;
alter table if exists trending_movies_summary add constraint FKogdvfcyhg0m82rfdnf7p0cfl3 foreign key (movie_id) references movie;
alter table if exists trending_movies_summary add constraint FKcah2va60wec3pbns5r09h82ps foreign key (rating_start_id) references rating;